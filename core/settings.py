"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 2.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

from decouple import config, Csv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="super_secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)
ADMIN_URL = config("ADMIN_URL", default="admin")
SITE_ID = 1

ALLOWED_HOSTS = ["*"]
CORS_ALLOWED_ORIGINS = config(
    "DJANGO_ALLOWED_ORIGINS", cast=Csv(delimiter=" "), default="http://localhost:3000"
)
CORS_ORIGIN_WHITELIST = CORS_ALLOWED_ORIGINS


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "corsheaders",
]
LOCAL_APPS = [
    "accounts",
    "services",
]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": os.path.join(BASE_DIR, "templates"),
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
IS_SQLITE = config("IS_SQLITE", default=False, cast=bool)
if not IS_SQLITE:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("PG_NAME", default="crypto"),
            "USER": config("PG_USER", default="crypto"),
            "PASSWORD": config("PG_PASS", default="crypto"),
            "HOST": config("PG_HOST", default="localhost"),
            "PORT": config("PG_PORT", default="5432", cast=int),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "accounts.User"
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "/media/")

if USE_TZ:
    CELERY_TIMEZONE = TIME_ZONE


BSC_HTTPS_ENDPOINTS = config("BSC_HTTPS_ENDPOINTS", default="")
BINANCE_UPDATE_FREQUENCY = config("BINANCE_UPDATE_FREQUENCY", default=60 * 5, cast=int)

BITCOIN_HOST = config("BITCOIN_HOST", default="")
BITCOIN_PORT = config("BITCOIN_PORT", default=80)
BITCOIN_USERNAME = config("BITCOIN_USERNAME", default="")
BITCOIN_PASSWORD = config("BITCOIN_PASSWORD", default="")
BITCOIN_UPDATE_FREQUENCY = config("BITCOIN_UPDATE_FREQUENCY", default=60 * 10, cast=int)

BITCOIN_NETWORK = config("BITCOIN_NETWORK", default="testnet")
# 'bitcoin'

RABBIT_USERNAME = config("RABBIT_USERNAME", default="admin")
RABBIT_PASSWORD = config("RABBIT_PASSWORD", default="mypass")
RABBIT_HOST = config("RABBIT_HOST", default="rabbit")
RABBIT_PORT = config("RABBIT_PORT", default=5672, cast=int)
RABBIT_HEARTBEAT = config("RABBIT_HEARTBEAT", default=600, cast=int)
RABBIT_BLOCKED_CONNECTION_TIMEOUT = config(
    "RABBIT_BLOCKED_CONNECTION_TIMEOUT", default=300, cast=int
)

NUMBER_OF_CONFIRMATIONS = config("NUMBER_OF_CONFIRMATIONS", default=3, cast=int)
